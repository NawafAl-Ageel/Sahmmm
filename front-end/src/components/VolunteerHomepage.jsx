import { useEffect, useState } from 'react';
import axios from 'axios';
import HeaderV from "./HeaderV";
import OpportunityDetails from './OpportunityDetails'; // Import the modal component
import './VolunteerHomepage.css'; // Styles for the homepage and modal

const saudiCities = [
  "ุงูุฑูุงุถ", "ุฌุฏุฉ", "ุงููุฏููุฉ", "ุงููููุฑุฉ", "ุชุจูู", "ุงูุฏูุงู", "ุงูุงุญุณุงุก", "ุงููุทูู", 
  "ุฎููุณ ูุดูุท", "ุงููุธููู", "ุงููููู", "ุงููุจุฑุฒ", "ุงูุทุงุฆู", "ูุฌุฑุงู", "ุญูุฑ ุงูุจุงุทู", 
  "ุงูุฌุจูู", "ุถุจุงุก", "ุงูุฎุฑุฌ", "ุงูุซูุจุฉ", "ููุจุน ุงูุจุญุฑ", "ุงูุฎุจุฑ", "ุนุฑุนุฑ", "ุงูุฏูุงุฏูู", 
  "ุนููุฒุฉ", "ุณูุงูุง", "ุฌุงุฒุงู", "ุงููุฑูุงุช", "ุงูุธูุฑุงู", "ุงูุจุงุญุฉ", "ุงูุฒููู", "ุงูุฑุณ", 
  "ูุงุฏู ุงูุฏูุงุณุฑ", "ุจูุดุฉ", "ุณููุงุช", "ุดุฑูุฑุฉ", "ุจุญุฑุฉ", "ุชุงุฑูุช", "ุตุจูุง", "ุจุฏุฑ", 
  "ุฃุญุฏ ุฑููุฏุฉ", "ุงููุฑุดุฉ", "ุงูุญูุทุฉ", "ุงูุงููุงุฌ" // Add all cities as needed
];

const VolunteerHomepage = ({ user, handleLogout }) => {
  const [opportunities, setOpportunities] = useState([]);
  const [selectedOpportunity, setSelectedOpportunity] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [filter, setFilter] = useState('all');
  const [date, setDate] = useState('');
  const [locationFilter, setLocationFilter] = useState('all'); // Default to 'all'

  useEffect(() => {
    const fetchOpportunities = async () => {
      try {
        const response = await axios.get('http://localhost:5000/opportunities', {
          params: { category: filter === 'all' ? '' : filter },
          headers: {
            Authorization: `Bearer ${localStorage.getItem('authToken')}`,
          },
        });
        setOpportunities(response.data);
      } catch (error) {
        console.error('Error fetching opportunities:', error);
      }
    };

    fetchOpportunities();
  }, [filter]); // Add filter as a dependency

  const handleCardClick = (opportunity) => {
    setSelectedOpportunity(opportunity);
    setShowModal(true);
  };

  const handleCloseModal = () => {
    setShowModal(false);
    setSelectedOpportunity(null);
  };

  const filteredOpportunities = opportunities.filter((opp) => {
    const matchesSearch = opp.title.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesFilter = filter === 'all' || opp.category === filter;
    const matchesDate = !date || new Date(opp.date) >= new Date(date);
  
    // Correctly define matchesLocation inside the filter function
    const matchesLocation = 
      locationFilter === 'ุฎุงุฑุฌ ุงูุณุนูุฏูุฉ'
        ? !saudiCities.includes(opp.location)
        : locationFilter === 'all' || opp.location === locationFilter;
  
    return matchesSearch && matchesFilter && matchesDate && matchesLocation;
  });

  return (
    <div>
  <HeaderV name={user.name} handleLogout={handleLogout} />
  <div className="main-section">
    <div className="homepage-container">
      <div className="search-filter-container">
        <input
          type="text"
          placeholder="ุงุจุญุซ"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="search-input"
        />
<div className="location-filter-container">
<label htmlFor="locationFilter" className="filter-label">ุงูุชุตููุฉ ุญุณุจ ุงููููุน</label>
<select value={locationFilter}onChange={(e) => setLocationFilter(e.target.value)} className="filter-dropdown">
<option value='all'>ุงููู</option><option value="ุฎุงุฑุฌ ุงูุณุนูุฏูุฉ">ุฎุงุฑุฌ ุงูุณุนูุฏูุฉ</option>
  <option value="ุงูุฃุญุณุงุก">ุงูุฃุญุณุงุก</option><option value="ุงูุฃููุงุฌ">ุงูุฃููุงุฌ</option><option value="ุงูุจุงุญุฉ">ุงูุจุงุญุฉ</option>
  <option value="ุงูุฌุจูู">ุงูุฌุจูู</option><option value="ุงูุฌูู">ุงูุฌูู</option><option value="ุงูุฎุจุฑ">ุงูุฎุจุฑ</option>
  <option value="ุงูุฎุฑุฌ">ุงูุฎุฑุฌ</option><option value="ุงูุฏุฑุนูุฉ">ุงูุฏุฑุนูุฉ</option><option value="ุงูุฑุณ">ุงูุฑุณ</option>
  <option value="ุงูุฑูุญู">ุงูุฑูุญู</option><option value="ุงูุฑูุงุถ">ุงูุฑูุงุถ</option><option value="ุงูุฒููู">ุงูุฒููู</option>
  <option value="ุงูุณููู">ุงูุณููู</option><option value="ุงูุทุงุฆู">ุงูุทุงุฆู</option><option value="ุงูุธูุฑุงู">ุงูุธูุฑุงู</option>
  <option value="ุงูุนูุง">ุงูุนูุง</option><option value="ุงููุทูู">ุงููุทูู</option><option value="ุงููููุฐุฉ">ุงููููุฐุฉ</option>
  <option value="ุงููุตูู">ุงููุตูู</option><option value="ุงููุฏููุฉ ุงููููุฑุฉ">ุงููุฏููุฉ ุงููููุฑุฉ</option><option value="ุงููุฌุงุฑุฏุฉ">ุงููุฌุงุฑุฏุฉ</option>
  <option value="ุงููุฌูุนุฉ">ุงููุฌูุนุฉ</option><option value="ุงููุฐูุจ">ุงููุฐูุจ</option><option value="ุงููุฒุงุญููุฉ">ุงููุฒุงุญููุฉ</option>
  <option value="ุงููุธููู">ุงููุธููู</option><option value="ุงููููู">ุงููููู</option><option value="ุจุฏุฑ">ุจุฏุฑ</option>
  <option value="ุจููู">ุจููู</option><option value="ุจุฑูุฏุฉ">ุจุฑูุฏุฉ</option><option value="ุจูุดุฉ">ุจูุดุฉ</option>
  <option value="ุชุจูู">ุชุจูู</option><option value="ุชุฑุจุฉ">ุชุฑุจุฉ</option><option value="ุชููุงุก">ุชููุงุก</option>
  <option value="ุซุงุฏู">ุซุงุฏู</option><option value="ุฌุจูู">ุฌุจูู</option><option value="ุฌุฏุฉ">ุฌุฏุฉ</option>
  <option value="ุญุงุฆู">ุญุงุฆู</option><option value="ุญุฑูููุงุก">ุญุฑูููุงุก</option><option value="ุญูุฑ ุงูุจุงุทู">ุญูุฑ ุงูุจุงุทู</option>
  <option value="ุฎููุณ ูุดูุท">ุฎููุณ ูุดูุท</option><option value="ุงูุฎูุฌู">ุงูุฎูุฌู</option><option value="ุฎููุต">ุฎููุต</option>
  <option value="ุงูุฏูุงุฏูู">ุงูุฏูุงุฏูู</option><option value="ุงูุฏูู">ุงูุฏูู</option><option value="ุถุจุงุก">ุถุจุงุก</option>
  <option value="ุนุฑุนุฑ">ุนุฑุนุฑ</option><option value="ุนููุฒุฉ">ุนููุฒุฉ</option><option value="ุงูุนูููุฉ">ุงูุนูููุฉ</option>
  <option value="ูุงุฏู ุงูุฏูุงุณุฑ">ูุงุฏู ุงูุฏูุงุณุฑ</option><option value="ุงููุฌู">ุงููุฌู</option><option value="ููุจุน ุงูุจุญุฑ">ููุจุน ุงูุจุญุฑ</option>
  <option value="ุงูููุงูุฉ">ุงูููุงูุฉ</option><option value="ุงูุฎุฑูุฉ">ุงูุฎุฑูุฉ</option><option value="ุฑูุญุงุก">ุฑูุญุงุก</option>
  <option value="ุณูุงูุง">ุณูุงูุง</option><option value="ุตุจูุง">ุตุจูุง</option><option value="ุถุฑูุง">ุถุฑูุง</option>
  <option value="ุจูุดุฉ">ุจูุดุฉ</option><option value="ูุฑุณุงู">ูุฑุณุงู</option><option value="ุจูู ูุงูู">ุจูู ูุงูู</option>
  <option value="ุชูููุฉ">ุชูููุฉ</option>
</select>
</div>
        {/* Date Filter with Label */}
        <div className="date-filter-container">
          <label htmlFor="fromDate" className="filter-label">ุงูุชุตููุฉ ูู ูุฐุง ุงูุชุงุฑูุฎ</label>
          <input
            type="date"
            id="fromDate"
            value={date}
            onChange={(e) => setDate(e.target.value)}
            className="date-input"
          />
        </div>

        {/* Category Filter with Label */}
        <div className="category-filter-container">
          <label htmlFor="category" className="filter-label">ุงูุชุตููุฉ ุญุณุจ ุงููุฆุฉ</label>
          <select
            id="category"
            value={filter}
            onChange={(e) => setFilter(e.target.value)}
            className="filter-dropdown"
          >
            <option value="all">ุงููู</option>
            <option value="program">ุจูุฆูุฉ</option>
            <option value="workshop">ุตุญูุฉ</option>
            <option value="meetup">ุชูุธูููุฉ</option>
            <option value="webinar">ุงุฌุชูุงุนูุฉ</option>
            <option value="education">ุชุนููููุฉ</option>
            <option value="recreational">ุชุฑููููุฉ</option>
            <option value="sports">ุฑูุงุถูุฉ</option>
            <option value="relief">ุฅุบุงุซูุฉ</option>
          </select>


        </div>
        
      </div>
      


          <div className="opportunities-container">
            {filteredOpportunities.length > 0 ? (
              filteredOpportunities.map((opp) => {
                const isFutureDate = new Date(opp.date) > new Date();
                const hasVacancy = opp.participantsNeeded > opp.currentParticipants;

                return (
                  <div key={opp._id} className="opportunity-card" onClick={() => handleCardClick(opp)}>
                    <img 
                      src={`http://localhost:5000/uploads/${opp.image}`} 
                      alt={opp.title} 
                      className="opportunity-image"
                    />

                    <div className="opportunity-header">
                      {isFutureDate  ? (
                        <span className="status-label available">ูุชุงุญ ุงูุชุณุฌูู</span>
                      ) : (
                        <span className="status-label unavailable">ูุบูู ููุชุณุฌูู</span>
                      )}
                    </div>

                    <h3 className="opportunity-title">{opp.title}</h3>

                    <div className="opportunity-footer">
                      <div className="date">
                        <span className="icon">๐</span>
                        <span>{new Date(opp.date).toLocaleDateString()}</span>
                      </div>
                      <div className="duration">
                        <span className="icon">โฑ</span>
                        <span>ูุฏุฉ {opp.duration} ุณุงุนุงุช</span>
                      </div>
                      
                    </div>
                    
                  </div>
                  
                );
              })
            ) : (
              <p className="no-opportunities">ูุง ุชูุฌุฏ ูุฑุต ุญุงููุฉ</p>
            )}
            
          </div>
          
        </div>

        {showModal && (
          <OpportunityDetails 
            opportunity={selectedOpportunity} 
            onClose={handleCloseModal} 
          />
        )}
      </div>
      
    </div>
  );
};

export default VolunteerHomepage;
